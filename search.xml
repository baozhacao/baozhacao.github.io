<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>观察者和订阅发布模式</title>
      <link href="/2022/04/15/guan-cha-zhe-he-ding-yue-fa-bu-mo-shi/"/>
      <url>/2022/04/15/guan-cha-zhe-he-ding-yue-fa-bu-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://tuchuangs.com/imgs/2022/04/15/95f0c9776b6481c4.png"></h3><ol><li><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><ul><li>观察者模式是指观察者（Observer）直接订阅主题（Subject），而主题被激活时，会触发观察者里的事件。</li><li>就像父母和宝宝一样，父母看着宝宝，宝宝只要发生变化，父母就会知道并及时处理。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 观察者模式</span><span class="token comment">// 宝宝</span><span class="token keyword">class</span> <span class="token class-name">Subject</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 宝宝的状态</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">"不开心"</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>Observe <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//存放观察者</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 将观察者放到自己身上</span>  <span class="token function">attach</span><span class="token punctuation">(</span><span class="token parameter">ther</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>Observe<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ther<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//更新观察者的状态</span>  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>Observe<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      <span class="token comment">// 把宝宝这个整个类传进去</span>      item<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//父母</span><span class="token keyword">class</span> <span class="token class-name">Observe</span><span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">&#125;</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">Subject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 接受宝宝类，打印当宝宝状态更改时的变化</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span>Subject<span class="token punctuation">.</span>name<span class="token operator">+</span>Subject<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> baby <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token string">'宝宝'</span><span class="token punctuation">)</span><span class="token keyword">let</span> baba <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observe</span><span class="token punctuation">(</span><span class="token string">"爸爸"</span><span class="token punctuation">)</span><span class="token keyword">let</span> mama <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observe</span><span class="token punctuation">(</span><span class="token string">"妈妈"</span><span class="token punctuation">)</span>baby<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>baba<span class="token punctuation">)</span>baby<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>mama<span class="token punctuation">)</span><span class="token comment">//改变状态</span>baby<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">"开心"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>发布/订阅模式</p><ul><li>订阅者把自己想要订阅的事件注册到调度中心，当发布者发布事件到调度中心时，调度中心会通知订阅者处理代码。</li><li>就相当于中间多了一个中介，由第三方统一调度。</li><li>这个模式就好像买报纸，出版报纸的人要把报纸送到报社，买的人要到报社去买，当有新报纸时，报社还会发通知给买报的人。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// on是订阅事件，emit是发布事件</span><span class="token comment">// 邮局</span><span class="token keyword">let</span> el <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//粗存订阅者</span>  <span class="token literal-property property">_class</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">on</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_class<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_class<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      <span class="token function">item</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//订阅</span>el<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"张三买报纸"</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>el<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"李四买报纸"</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//出版社发报纸</span>el<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"光明日报"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 观察者 </tag>
            
            <tag> 订阅发布 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的布局模式</title>
      <link href="/2022/03/19/chang-jian-de-bu-ju-mo-shi/"/>
      <url>/2022/03/19/chang-jian-de-bu-ju-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-流式布局"><a href="#1-流式布局" class="headerlink" title="1.流式布局"></a>1.流式布局</h3><ul><li>最普通的盒子布局。</li></ul><h3 id="2-Flex布局"><a href="#2-Flex布局" class="headerlink" title="2. Flex布局"></a>2. Flex布局</h3><ul><li><p>Flex意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">duisplay</span><span class="token punctuation">:</span>flex<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Flex布局父容器的属性</p><ul><li>决定主轴的方向（即项目的排列方向）</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">flex-direction</span><span class="token punctuation">:</span> row | row-reverse | column | column-reverse<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>决定换不换行</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">flex-wrap</span><span class="token punctuation">:</span> nowrap | wrap | wrap-reverse<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>定义了项目在主轴上的对齐方式。</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start | flex-end | center | space-between | space-around<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>定义项目在交叉轴上如何对齐。</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">align-items</span><span class="token punctuation">:</span> flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。(有多行项目，必须是设置换行)</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">align-content</span><span class="token punctuation">:</span> flex-start | flex-end | center | space-between | space-around | stretch<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Flex布局子容器的属性</p><pre class="line-numbers language-none"><code class="language-none">flex给个固定的数值，可以设置属性所占的比例大小align-self: auto | flex-start | flex-end | center | baseline | stretchalign-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-媒体查询语法"><a href="#3-媒体查询语法" class="headerlink" title="3. 媒体查询语法"></a>3. 媒体查询语法</h3><ul><li>媒体查询@media可以针对不同屏幕尺寸设置不同样式。</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> 媒体类型 关键字<span class="token keyword">and</span>|<span class="token keyword">not</span>|<span class="token keyword">only</span><span class="token punctuation">(</span>媒体特性<span class="token punctuation">)</span></span><span class="token punctuation">&#123;</span>  css-code<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>媒体类型一般用screen，用于电脑屏幕，手机平板等。</p></li><li><p>媒体特性：width，min-width，max-width</p></li><li><p>可以针对不同的媒体使用不同 <em>stylesheets</em> :</p></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;link rel=<span class="token string">"stylesheet"</span> media=<span class="token string">"mediatype and|not|only (media feature)"</span> href=<span class="token string">"mystylesheet.css"</span>><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-rem布局"><a href="#4-rem布局" class="headerlink" title="4. rem布局"></a>4. rem布局</h3><ul><li>em：根据父盒子设置的font-size大小，相应的扩大子盒子十倍单位。这样的缺点是，页面上有大大小小的盒子，一个一个设置太麻烦。</li><li>rem：根据html设置的font-size大小，相应的扩大子盒子十倍单位。这样就可以使页面等比例缩放。</li></ul><h3 id="5-响应式布局"><a href="#5-响应式布局" class="headerlink" title="5. 响应式布局"></a>5. 响应式布局</h3><ul><li>响应式开发原理：通过媒体查询针对不同设备进行布局和样式的设置，达到适配不同设备的目的。</li><li>Bootstrap栅格式布局</li></ul>]]></content>
      
      
      <categories>
          
          <category> 布局模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Flex，布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue面试题1</title>
      <link href="/2022/03/15/vue-yuan-li-ceng/"/>
      <url>/2022/03/15/vue-yuan-li-ceng/</url>
      
        <content type="html"><![CDATA[<h2 id="1-虚拟dom"><a href="#1-虚拟dom" class="headerlink" title="1. 虚拟dom"></a>1. 虚拟dom</h2><h3 id="1-虚拟dom是什么？"><a href="#1-虚拟dom是什么？" class="headerlink" title="1. 虚拟dom是什么？"></a>1. 虚拟dom是什么？</h3><ul><li>在vue2.x版本中才加入虚拟dom</li><li>虚拟dom的本质就是一个js对象</li><li>具有跨平台的特性，在各个端都可以运行。    </li></ul><h3 id="2-虚拟dom在vue中做了什么"><a href="#2-虚拟dom在vue中做了什么" class="headerlink" title="2. 虚拟dom在vue中做了什么"></a>2. 虚拟dom在vue中做了什么</h3><ul><li>vue的渲染过程(最终会渲染成HTML,css,js)</li></ul><p><img src="https://tuchuangs.com/imgs/2022/03/c7fabe164e8796e9.png"></p><ul><li>如图所示，虚拟dom的两条线—-初始化和更新</li><li>第一条是将真实dom转化为虚拟dom  比较累赘</li><li>第二条线是更新的时候用来做对比</li></ul><h3 id="3-虚拟dom如何提升vue的渲染效率"><a href="#3-虚拟dom如何提升vue的渲染效率" class="headerlink" title="3. 虚拟dom如何提升vue的渲染效率"></a>3. 虚拟dom如何提升vue的渲染效率</h3><ul><li><p>vue的两大核心  组件化和数据驱动</p><ul><li><p>a.局部更新（更新节点数据，不需要摧毁整个元素）</p></li><li><p>b.将直接操作dom拿到js对象中作比较</p></li></ul></li></ul><h2 id="2-Diff算法中的patch"><a href="#2-Diff算法中的patch" class="headerlink" title="2. Diff算法中的patch()"></a>2. Diff算法中的patch()</h2><h3 id="vue渲染的两条线的实现"><a href="#vue渲染的两条线的实现" class="headerlink" title="vue渲染的两条线的实现"></a>vue渲染的两条线的实现</h3><ul><li>1.初始化patch(container,vnode)</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">vnode</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 虚拟dom生成的三个要素</span>  <span class="token keyword">let</span> tag <span class="token operator">=</span> vnode<span class="token punctuation">.</span>tag <span class="token comment">//目标元素 不可或缺</span>  <span class="token keyword">let</span> attrs <span class="token operator">=</span> vnode<span class="token punctuation">.</span>attrs <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//属性</span>  <span class="token keyword">let</span> children <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//子节点</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span>  <span class="token keyword">let</span> attrName <span class="token comment">//节点里的属性</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>attrName <span class="token keyword">in</span> attrs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>attrs<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>attrName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      elem<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>attrName<span class="token punctuation">,</span>attrs<span class="token punctuation">[</span>attrName<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//将子元素添加到目标元素之上</span>  children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">childVnode</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    elem<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">createElement</span><span class="token punctuation">(</span>childVnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//如果还有子元素，则通过递归继续添加</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> elem<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>2.更新patch(vnode,newVnode),更新子节点，不需要全部更新</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">updataChildren</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span>newVnode</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//拿到新旧虚拟dom的子节点</span>  <span class="token keyword">let</span> vnode <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> newVnode <span class="token operator">=</span> newVnode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">//遍历对比更新</span>  children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">childrenVnode<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">//循环的每一项,拿到新的节点的每一项和老的进行对比</span>    <span class="token keyword">let</span> newChildrenVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token comment">//证明第一层没有变化</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>childrenVnode<span class="token punctuation">.</span>tag <span class="token operator">==</span> newChildrenVnode<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">updataChildren</span><span class="token punctuation">(</span>childrenVnode<span class="token punctuation">,</span>newChildrenVnode<span class="token punctuation">)</span><span class="token comment">//第一层没变化使用递归继续对比</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      <span class="token function">replaceNode</span><span class="token punctuation">(</span>childrenVnode<span class="token punctuation">,</span>newChildrenVnode<span class="token punctuation">)</span><span class="token comment">//vue内部方法，新老节点进行替换</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Vue2-x响应式原理"><a href="#3-Vue2-x响应式原理" class="headerlink" title="3. Vue2.x响应式原理"></a>3. Vue2.x响应式原理</h2><ul><li>通过发布订阅模式和数据劫持(Object.defineProperty)实现。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//订阅器模型</span><span class="token keyword">let</span> Dep <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">clientList</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//一个容器，用来存放用户的各种数据</span>  <span class="token comment">//添加订阅</span>  <span class="token function-variable function">listen</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//判断一个人有没有登记过</span>    <span class="token comment">// if (!this.clientList[key]) &#123;</span>    <span class="token comment">//   this.clientList[key] = []</span>    <span class="token comment">// &#125;</span>    <span class="token comment">// this.clientList[key].push(fn)</span>    <span class="token comment">//简化，短路表达式</span>    <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clientList<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clientList<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 发布订阅，数据变化时提醒</span>  <span class="token function-variable function">trigger</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//将类数组转化为数组</span>      fns <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientList<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token comment">//拿到当前这一项</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fns <span class="token operator">||</span> fns<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fn<span class="token punctuation">;</span> fn <span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//数据劫持的方法</span><span class="token keyword">let</span> <span class="token function-variable function">dataHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> dataKey<span class="token punctuation">,</span> selector <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>    el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> dataKey<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//取值</span>    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"取值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> value    <span class="token punctuation">&#125;</span>        <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      value <span class="token operator">=</span> val<span class="token punctuation">;</span>      <span class="token comment">//发布</span>      Dep<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> val<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//给这个对象添加订阅，要订阅了，才能发布</span>  Dep<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> text  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>响应式<ul><li>数据联动（双向绑定）</li><li>捕获修改</li></ul></li></ul><h2 id="4-Vue3-x响应式原理"><a href="#4-Vue3-x响应式原理" class="headerlink" title="4. Vue3.x响应式原理"></a>4. Vue3.x响应式原理</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1. Object.defineProperty => Proxy()</span>    <span class="token comment">// Vue2.x data中的属性做了遍历 + 递归, 给每一个属性设置getter, setter</span>    <span class="token comment">// data中预定义属性做出响应式</span>      <span class="token comment">// 2. Proxy()</span>    <span class="token comment">// 2.1 监听是针对一整个对象(完全代理所有属性)</span>    <span class="token comment">// 2.2 在目标对象之前假设一层拦截 => 外界访问该对象，必须通过这层拦截</span>    <span class="token comment">// 响应式重要特征 => 需要捕获到修改，做出对应的反应</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'小明'</span><span class="token punctuation">,</span>        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// target => 源数据</span>        <span class="token comment">// 查</span>       <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">读取了P的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>propName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">属性</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>           <span class="token keyword">return</span> target<span class="token punctuation">[</span>propName<span class="token punctuation">]</span>           <span class="token comment">// return Reflect.get(target, propName)</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>       <span class="token comment">// 改 + 增</span>       <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propName<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">修改了P的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>propName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">属性，值为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>           target<span class="token punctuation">[</span>propName<span class="token punctuation">]</span> <span class="token operator">=</span> value       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>       <span class="token comment">// 删</span>       <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> propName</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">删除了P的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>propName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">属性</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>           <span class="token keyword">return</span> <span class="token keyword">delete</span> target<span class="token punctuation">[</span>propName<span class="token punctuation">]</span> <span class="token comment">// 真，假</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-vue数据驱动的原理及实现"><a href="#5-vue数据驱动的原理及实现" class="headerlink" title="5. vue数据驱动的原理及实现"></a>5. vue数据驱动的原理及实现</h2><ul><li><p>数据驱动是vue优点之一</p></li><li><p>在vue中不会直接操作dom，通过数据驱动减少dom’的操作，从而优化性能</p></li><li><p>使数据可观测，模拟实现</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//观测类</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//判断数组还是对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//数组逻辑</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 对象逻辑</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">walk</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//专门拿对象key值的方法</span>    <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//循环  每一个属性都变成可观测的</span><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    val <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token comment">//val  少定义一个对象</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//递归</span>    <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">被读取了</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">被修改了，新值为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>newVal<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      val <span class="token operator">=</span> newVal    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/2022/03/08/git-chang-yong-ming-ling/"/>
      <url>/2022/03/08/git-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<ul><li>Git 是一个很强大的分布式版本控制系统。</li></ul><h2 id="1-仓库操作常用命令"><a href="#1-仓库操作常用命令" class="headerlink" title="1. 仓库操作常用命令"></a>1. 仓库操作常用命令</h2><ul><li><p>初始化GIt仓库</p><pre class="line-numbers language-none"><code class="language-none">git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看文件状态</p><pre class="line-numbers language-none"><code class="language-none">git status或git status -s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>一次性将文件加入暂存区</p><pre class="line-numbers language-none"><code class="language-none">git add .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将暂存区的文件提交到Git仓库</p><pre class="line-numbers language-none"><code class="language-none">git commit -m&quot;提交信息&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将本地仓库与远程仓库链接</p><pre class="line-numbers language-none"><code class="language-none">git remote add origin 远程仓库地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>上传到远程仓库，如果出现错误，检查本地的。gitconfig文件</p><pre class="line-numbers language-none"><code class="language-none">git push -u origin master&#x2F;&#x2F;上传到master分支，现在github一般默认main分支<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="2-分支操作常用命令"><a href="#2-分支操作常用命令" class="headerlink" title="2. 分支操作常用命令"></a>2. 分支操作常用命令</h2><ul><li><p>查看本地分支</p><pre class="line-numbers language-none"><code class="language-none">git branch   查看远程分支 git branch -r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建本地分支</p><pre class="line-numbers language-none"><code class="language-none">git branch [name] —-注意新分支创建后不会自动切换为当前分支<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>切换分支</p><pre class="line-numbers language-none"><code class="language-none">git checkout [name] 创建新分支并立即切换到新分支git checkout -b [name]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>合并分支</p><pre class="line-numbers language-none"><code class="language-none">git merge [name] —-将名称为[name]的分支与当前分支合并<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li><p>删除分支</p><pre class="line-numbers language-none"><code class="language-none">git branch -d 分支名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>第一次把分支推送到远程仓库</p><pre class="line-numbers language-none"><code class="language-none">git push -u 远程仓库名 本地分支名：远程分支名如果本地分支与远程分支一样时，可简化成一个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>从远程仓库中下载分支</p><pre class="line-numbers language-none"><code class="language-none">git checkout 远程仓库分支名重命名 git checkout 重命名 远程仓库名&#x2F;远程分支名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>把远程仓库分支的代码更新到本地</p><pre class="line-numbers language-none"><code class="language-none">git pull<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue面试题1</title>
      <link href="/2022/03/01/vue-ying-yong-ceng/"/>
      <url>/2022/03/01/vue-ying-yong-ceng/</url>
      
        <content type="html"><![CDATA[<h2 id="1-MVC与MVVM"><a href="#1-MVC与MVVM" class="headerlink" title="1. MVC与MVVM"></a>1. MVC与MVVM</h2><ul><li>mvc中的c为control，为控制器，按照以前的做法都是把它存在后台，通过接口把数据存在后台。</li><li>缺点是前后端无法独立开发，必须等后端把数据写好前端才能开发。</li><li>前端太过依赖于后台，没有自己的数据储存中心。</li><li>mvvm把c换成了vm，有自己的数据储存中心，例如vue中的data，使前后端更加独立。</li></ul><h2 id="2-v-model原理"><a href="#2-v-model原理" class="headerlink" title="2. v-model原理"></a>2. v-model原理</h2><ul><li><p>v-model是Vue实现数据双向绑定的功能，运用响应式原理。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"message"</span><span class="token operator">></span>等同于<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"message"</span> @input<span class="token operator">=</span><span class="token string">"message = $event.target.value"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//在vue2中，数据的响应式原理使用的是Object.defineProperty</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>  <span class="token comment">//取值</span>  <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"取值"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function-variable function">set</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//把拦截到的数据通过set放到页面上</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"uName"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> val<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"uName"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEvevtListener</span><span class="token punctuation">(</span><span class="token string">"kenup"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token comment">//event</span>  obj<span class="token punctuation">.</span>username <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>上面代码的原理就是创建一个对象obj，用响应式拦截的方式给对象创建一个属性，给input时间添加方法，获得输入的内容，在通过拦截的set方法把内容呈现在页面上</li></ul></li></ul><h2 id="3-data为什么是函数"><a href="#3-data为什么是函数" class="headerlink" title="3. data为什么是函数"></a>3. data为什么是函数</h2><ul><li>闭包 —- 每个组件都有自己的私有作用域，组件之间不会相互影响。</li></ul><h2 id="4-v-if与v-show的区别"><a href="#4-v-if与v-show的区别" class="headerlink" title="4. v-if与v-show的区别"></a>4. v-if与v-show的区别</h2><ul><li>v-if —- 不满足条件不会渲染dom  =&gt;适合单次隐藏。</li><li>v-show —- display:none =&gt;适合多次隐藏，不会影响性能。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js实现Promise</title>
      <link href="/2022/01/28/js-shi-xian-promise/"/>
      <url>/2022/01/28/js-shi-xian-promise/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是Promise"><a href="#1-什么是Promise" class="headerlink" title="1. 什么是Promise"></a>1. 什么是Promise</h2><ul><li><p>异步和同步</p><ul><li>异步，操作之间没有关系，同时执行多个操作， 代码复杂</li><li>同步，同时只能做一件事，代码简单</li></ul></li><li><p>Promise是一个类，可以翻译成 承诺、许诺 、期约；</p></li><li><p>用同步的方式来书写异步代码;</p></li><li><p>在通过new创建Promise对象时，我们需要传入一个回调函数，我们称之为executor</p><ul><li>这个回调函数会被立即执行，并且给传入另外两个回调函数resolve、reject；</li><li>当我们调用resolve回调函数时，会执行Promise对象的then方法传入的回调函数；</li><li>当我们调用reject回调函数时，会执行Promise对象的catch方法传入的回调函数；</li></ul></li></ul><p><img src="https://tuchuangs.com/imgs/2022/01/65f51c772343012b.png"></p><h2 id="2-Promise常用方法"><a href="#2-Promise常用方法" class="headerlink" title="2. Promise常用方法"></a>2. Promise常用方法</h2><ul><li>Promise 实例有一个thenthen、catch、finally方法</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 异步代码...</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token comment">//用来指定下一步的回调函数</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token comment">//收集错误</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token comment">//无论什么时候都会执行</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// f1的异步操作执行完成，就会执行f2。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>有时候我们已经有一个现成的内容了，希望将其转成Promise来使用，这个时候我们可以使用 Promise.resolve 方法来完成。 </p></li><li><p>Promise.resolve的用法相当于new Promise，并且执行resolve操作：</p><ul><li>resolve参数的形态： </li><li>情况一：参数是一个普通的值或者对象 </li><li>情况二：参数本身是Promise </li><li>情况三：参数是一个thenable</li></ul></li><li><p>Promise.all(promiseArray)方法</p><ul><li>将多个Promise对象实例包装，生成并返回一个新的Promise实例</li><li>promise数组中所有的promise实例都变为resolve的时候，该方法才会返回</li><li>并将所有结果传递results数组中</li><li>promise数组中任何一个promise为reject的话，则整个Promise.all调用会立即终止，并返回一个reject的新的promise对象</li></ul></li><li><p>reject方法类似于resolve方法，只是会将Promise对象的状态设置为reject状态。</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    p3 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [1, 2, 3]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Promise.race([p1, p2, p3])<ul><li>Promse.race就是赛跑的意思</li><li>哪个结果获得的快，就返回那个结果</li><li>不管结果本身是成功状态还是失败状态</li></ul></li></ul><h2 id="3-js实现Promise"><a href="#3-js实现Promise" class="headerlink" title="3. js实现Promise"></a>3. js实现Promise</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 手写promise</span><span class="token comment">// 实现规范https://promisesaplus.com/</span><span class="token comment">//创建promise的执行状态</span><span class="token keyword">const</span> <span class="token constant">PROMISE_STATUS_PENDING</span> <span class="token operator">=</span> <span class="token string">'pending'</span><span class="token keyword">const</span> <span class="token constant">PROMISE_STATUS_FULFILLED</span> <span class="token operator">=</span> <span class="token string">'fulfilled'</span><span class="token keyword">const</span> <span class="token constant">PROMISE_STATUS_REJECTED</span> <span class="token operator">=</span> <span class="token string">'rejected'</span><span class="token comment">// 工具函数</span><span class="token keyword">function</span> <span class="token function">execFunctionWithCatchError</span><span class="token punctuation">(</span><span class="token parameter">execFn<span class="token punctuation">,</span> value<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">execFn</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">HYPromise</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">PROMISE_STATUS_PENDING</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">undefined</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">undefined</span>    <span class="token comment">//定义两个数组，放res，err，解决连续调用后面一个覆盖前面一个的</span>    <span class="token comment">// 问题，放到数组里循环遍历执行每一个函数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledFns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedFns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PROMISE_STATUS_PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//把这个函数放到微任务里，也可以用setTimeout，把任务放到宏任务里</span>        <span class="token comment">//原因是要让调用的then先执行</span>        <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">PROMISE_STATUS_FULFILLED</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value          <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledFns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PROMISE_STATUS_PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token constant">PROMISE_STATUS_PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">PROMISE_STATUS_REJECTED</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason          <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedFns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//传入的函数，立即调用</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// catch解决方法,抛出异常之后err会传给下一个promise执行</span>    <span class="token keyword">const</span> <span class="token function-variable function">defaultOnRejected</span> <span class="token operator">=</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">throw</span> err <span class="token punctuation">&#125;</span>    onRejected <span class="token operator">=</span> onRejected <span class="token operator">||</span> defaultOnRejected    <span class="token comment">//链式调用的解决方法</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HYPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 1.如果在then调用的时候, 状态已经确定下来</span>      <span class="token comment">// 解决前面调用过之后，后面又用定时器延迟调用的问题</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PROMISE_STATUS_FULFILLED</span> <span class="token operator">&amp;&amp;</span> onFulfilled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// try &#123;</span>        <span class="token comment">//   const value = onFulfilled(this.value)</span>        <span class="token comment">//   resolve(value)</span>        <span class="token comment">// &#125; catch(err) &#123;</span>        <span class="token comment">//   reject(err)</span>        <span class="token comment">// &#125;</span>        <span class="token function">execFunctionWithCatchError</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PROMISE_STATUS_REJECTED</span> <span class="token operator">&amp;&amp;</span> onRejected<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// try &#123;</span>        <span class="token comment">//   const reason = onRejected(this.reason)</span>        <span class="token comment">//   resolve(reason)</span>        <span class="token comment">// &#125; catch(err) &#123;</span>        <span class="token comment">//   reject(err)</span>        <span class="token comment">// &#125;</span>        <span class="token function">execFunctionWithCatchError</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 2.将成功回调和失败的回调放到数组中</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PROMISE_STATUS_PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>onFulfilled<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledFns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token comment">// try &#123;</span>          <span class="token comment">//   const value = onFulfilled(this.value)</span>          <span class="token comment">//   resolve(value)</span>          <span class="token comment">// &#125; catch(err) &#123;</span>          <span class="token comment">//   reject(err)</span>          <span class="token comment">// &#125;</span>          <span class="token function">execFunctionWithCatchError</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedFns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token comment">// try &#123;</span>          <span class="token comment">//   const reason = onRejected(this.reason)</span>          <span class="token comment">//   resolve(reason)</span>          <span class="token comment">// &#125; catch(err) &#123;</span>          <span class="token comment">//   reject(err)</span>          <span class="token comment">// &#125;</span>          <span class="token function">execFunctionWithCatchError</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//return出一个promise</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//无论成功或失败都要调用这个函数</span>  <span class="token function">finally</span><span class="token punctuation">(</span>onFinally<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">onFinally</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">onFinally</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 静态方法的实现</span>  <span class="token keyword">static</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HYPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">static</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HYPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">static</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 问题关键: 什么时候要执行resolve, 什么时候要执行reject</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HYPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      promises<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">promise</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          values<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>values<span class="token punctuation">.</span>length <span class="token operator">===</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">static</span> <span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HYPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      promises<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">promise</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token constant">PROMISE_STATUS_FULFILLED</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> res<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span>length <span class="token operator">===</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token constant">PROMISE_STATUS_REJECTED</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> err<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span>length <span class="token operator">===</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">static</span> <span class="token function">race</span><span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HYPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      promises<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">promise</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// promise.then(res => &#123;</span>        <span class="token comment">//   resolve(res)</span>        <span class="token comment">// &#125;, err => &#123;</span>        <span class="token comment">//   reject(err)</span>        <span class="token comment">// &#125;)</span>        promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>   <span class="token keyword">static</span> <span class="token function">any</span><span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// resolve必须等到有一个成功的结果</span>    <span class="token comment">// reject所有的都失败才执行reject</span>    <span class="token keyword">const</span> reasons <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HYPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      promises<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">promise</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          reasons<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>reasons<span class="token punctuation">.</span>length <span class="token operator">===</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AggregateError</span><span class="token punctuation">(</span>reasons<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//调用</span><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HYPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"状态padding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//reject(222),这两个只能调用一个，其他的无效</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>  <span class="token comment">// throw new Error("executor error message")</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 调用then方法 </span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"res1"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"err1"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 调用多次then</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"res2:"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"err2:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 在确定Promise状态之后, 再次调用then</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"res3:"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"err3:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment">//链式调用</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"res1:"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token string">"aaaa"</span>  <span class="token comment">// throw new Error("err message")</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"err1:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token string">"bbbbb"</span>  <span class="token comment">// throw new Error("err message")</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"res2:"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"err2:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//catch</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"res:"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6+之Proxy-Reflect</title>
      <link href="/2022/01/25/es6-zhi-proxy-reflect/"/>
      <url>/2022/01/25/es6-zhi-proxy-reflect/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><ul><li><p>在开始Proxy和Reflect之前我们先说一Object.definePropert</p></li><li><p>在前面我们的属性都是直接定义在对象内部，或者直接添加到对象内部的，但是这样来做的时候我们就不能对这个属性进行一些限制，比如任何时候都可以删除或遍历操作。</p></li><li><p>如果我们想要对一个属性进行比较精准的操作控制，那么我们就可以使用属性描述符。</p></li><li><p>通过属性描述符Object.definePropert可以精准的添加或修改对象的属性；</p></li><li><p>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>prop<span class="token punctuation">,</span>descriptor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>    - obj：要定义属性的对象；    - prop：要定义或修改的属性的名称或 Symbol；    - descriptor：要定义或修改的属性描述符；    - 返回值： 被传递给函数的对象。</code></pre><ul><li>属性描述符的类型有两种：<ul><li>数据属性；</li><li>存取属性；</li></ul></li></ul><p><img src="https://tuchuangs.com/imgs/2022/01/b805f8fc4f9bb856.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//数据属性</span><span class="token operator">/</span> name和age虽然没有使用属性描述符来定义<span class="token punctuation">,</span> 但是它们也是具备对应的特性的<span class="token comment">// value: 赋值的value</span><span class="token comment">// configurable: true</span><span class="token comment">// enumerable: true</span><span class="token comment">// writable: true</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"why"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token comment">// 数据属性描述符</span><span class="token comment">// 用了属性描述符, 那么会有默认的特性</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"address"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"北京市"</span><span class="token punctuation">,</span> <span class="token comment">// 默认值undefined</span>  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 默认值false,该特殊不可删除/也不可以重新定义属性描述符</span>  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 默认值false,该特殊是配置对应的属性(address)是否是可以枚举</span>  <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 默认值false,该特性是属性是否是可以赋值(写入值) </span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//存取属性</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"why"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  <span class="token literal-property property">_address</span><span class="token operator">:</span> <span class="token string">"北京市"</span><span class="token punctuation">&#125;</span><span class="token comment">// 存取属性描述符</span><span class="token comment">// 1.隐藏某一个私有属性被希望直接被外界使用和赋值</span><span class="token comment">// 2.如果我们希望截获某一个属性它访问和设置值的过程时, 也会使用存储属性描述符</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"address"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_address  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_address <span class="token operator">=</span> value  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上是用Object.defineProperty 的存储属性描述符来对 属性的操作进行监听。但是这样做有什么缺点呢？</p><ul><li>首先，Object.defineProperty设计的初衷，不是为了去监听截止一个对象中 所有的属性的。 ü 我们在定义某些属性的时候，初衷其实是定义普通的属性，但是后面我们强 行将它变成了数据属性描述符。</li><li>p 其次，如果我们想监听更加丰富的操作，比如新增属性、删除属性，那么 Object.defineProperty是无能为力的。</li></ul><h2 id="2-Proxy基本使用"><a href="#2-Proxy基本使用" class="headerlink" title="2. Proxy基本使用"></a>2. Proxy基本使用</h2><ul><li>在ES6中，新增了一个Proxy类，这个类从名字就可以看出来，是用于帮助我们创建一个代理的： <ul><li>也就是说，如果我们希望监听一个对象的相关操作，那么我们可以先创建一个代理对象（Proxy对象）； </li><li>之后对该对象的所有操作，都通过代理对象来完成，代理对象可以监听我们想要对原对象进行哪些操作；</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"why"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> objProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 第一个参数为所代理的对象，第二个参数为捕获器，就是对代理的对像做操作，常用的有set和get</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>set和get分别对应的是函数类型<ul><li>set函数有四个参数：<ul><li>target：目标对象（侦听的对象）；</li><li>property：将被设置的属性key； </li><li>value：新属性值； </li><li>receiver：调用的代理对象；</li></ul></li><li>get函数有三个参数：<ul><li>target：目标对象（侦听的对象）；</li><li>property：将被设置的属性key；</li><li>receiver：调用的代理对象；</li></ul></li></ul></li></ul><p><img src="https://tuchuangs.com/imgs/2022/01/096b9b6f2776db50.png" alt="捕获器"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"why"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> objProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取值时的捕获器</span>  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">监听到对象的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">属性被访问了</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> target<span class="token punctuation">)</span>    <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 设置值时的捕获器</span>  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">监听到对象的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">属性被设置值</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> target<span class="token punctuation">)</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newValue  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 监听in的捕获器</span>  <span class="token function-variable function">has</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">监听到对象的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">属性in操作</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> target<span class="token punctuation">)</span>    <span class="token keyword">return</span> key <span class="token keyword">in</span> target  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 监听delete的捕获器</span>  <span class="token function-variable function">deleteProperty</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">监听到对象的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">属性in操作</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> target<span class="token punctuation">)</span>    <span class="token keyword">delete</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//对函数对象的捕获</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> fooProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">apply</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> thisArg<span class="token punctuation">,</span> argArray</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"对foo函数进行了apply调用"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">target</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> argArray<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">construct</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> argArray<span class="token punctuation">,</span> newTarget</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"对foo函数进行了new调用"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">target</span><span class="token punctuation">(</span><span class="token operator">...</span>argArray<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">fooProxy</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"cba"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">fooProxy</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"cba"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Reflect的作用"><a href="#3-Reflect的作用" class="headerlink" title="3. Reflect的作用"></a>3. Reflect的作用</h2><ul><li>Reflect也是ES6新增的一个API，它是一个对象，字面的意思是反射。<ul><li>它主要提供了很多操作JavaScript对象的方法，有点像Object中操作对象的方法；</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//比如Reflect.getPrototypeOf(target)类似于 Object.getPrototypeOf()；</span><span class="token comment">//比如Reflect.defineProperty(target, propertyKey, attributes)类似于Object.defineProperty() </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>如果我们有Object可以做这些操作，那么为什么还需要有Reflect这样的新增对象呢<ul><li>这是因为在早期的ECMA规范中没有考虑到这种对 对象本身 的操作如何设计会更加规范，所以将这些API放到了Object上面；</li><li>但是Object作为一个构造函数，这些操作实际上放到它身上并不合适；</li><li>另外还包含一些类似于 in、delete操作符，让JS看起来是会有一些奇怪的；</li><li>所以在ES6中新增了Reflect，让我们这些操作都集中到了Reflect对象上；</li></ul></li></ul><p><img src="https://tuchuangs.com/imgs/2022/01/6dee522a377ef0e2.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">_name</span><span class="token operator">:</span> <span class="token string">"why"</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> newValue  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> objProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// receiver是创建出来的代理对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"get方法被访问--------"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>receiver <span class="token operator">===</span> objProxy<span class="token punctuation">)</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"set方法被访问--------"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// console.log(objProxy.name)</span>objProxy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"kobe"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>我们发现在使用getter、setter的时候有一个receiver的参数，它的作用是什么呢？如果我们的源对象（obj）有setter、getter的访问器属性，那么可以通过receiver来改变里面的this；</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">_name</span><span class="token operator">:</span> <span class="token string">"why"</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> newValue  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> objProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// receiver是创建出来的代理对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"get方法被访问--------"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>receiver <span class="token operator">===</span> objProxy<span class="token punctuation">)</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"set方法被访问--------"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// console.log(objProxy.name)</span>objProxy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"kobe"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Reflect的construct</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// const stu = new Student("why", 18)</span><span class="token comment">// console.log(stu)</span><span class="token comment">// console.log(stu.__proto__ === Student.prototype)</span><span class="token comment">// 执行Student函数中的内容, 但是创建出来对象是Teacher对象</span><span class="token keyword">const</span> teacher <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>Student<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"why"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Teacher<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>teacher<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>teacher<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Teacher</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4-例子"><a href="#4-例子" class="headerlink" title="4. 例子"></a>4. 例子</h2><p>敬请期待！</p>]]></content>
      
      
      <categories>
          
          <category> es6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
            <tag> definePropert </tag>
            
            <tag> Proxy </tag>
            
            <tag> Reflect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6+之Set-Map</title>
      <link href="/2022/01/24/es6-zhi-set-map/"/>
      <url>/2022/01/24/es6-zhi-set-map/</url>
      
        <content type="html"><![CDATA[<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><h3 id="1-Set的基本使用"><a href="#1-Set的基本使用" class="headerlink" title="1.Set的基本使用"></a>1.Set的基本使用</h3><ul><li>在ES6之前，我们存储数据的结构主要有两种：数组、对象。</li><li>在ES6中新增了另外两种数据结构：Set、Map，以及它们的另外形式WeakSet、WeakMap。</li><li>Set是一个新增的数据结构，可以用来保存数据，类似于数组，但是和数组的区别是元素不能重复。<ul><li>创建Set我们需要通过Set构造函数.</li><li>Set有一个非常常用的功能就是给数组去重。</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建Set</span><span class="token keyword">const</span> set1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token comment">//set(3)&#123;10,20,30&#125;</span><span class="token comment">//给数组去重</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token keyword">const</span> newArray1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token comment">//const newArray1 = Array.from(set)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Set的常见方法"><a href="#2-Set的常见方法" class="headerlink" title="2.Set的常见方法"></a>2.Set的常见方法</h3><ul><li><p>Set常见的属性：</p><ul><li>size：返回Set中元素的个数；</li></ul></li><li><p>Set常用的方法：</p><ul><li>add(value)：添加某个元素，返回Set对象本身；</li><li>delete(value)：从set中删除和这个值相等的元素，返回boolean类型；</li><li>has(value)：判断set中是否存在某个元素，返回boolean类型；</li><li>clear()：清空set中所有的元素，没有返回值；</li><li>forEach(callback, [, thisArg])：通过forEach遍历set；（也支持for of遍历）</li></ul></li></ul><h3 id="3-WeakSet使用"><a href="#3-WeakSet使用" class="headerlink" title="3.WeakSet使用"></a>3.WeakSet使用</h3><p>和Set类似的另外一个数据结构称之为WeakSet，也是内部元素不能重复的数据结构。</p><ul><li>WeakSet中只能存放对象类型，不能存放基本数据类型；</li><li>WeakSet对元素的引用是弱引用，如果没有其他引用对某个对象进行引用，那么GC可以对该对象进行回收；</li><li>关于强引用和弱引用请看：<a href="https://baozhacao.github.io/2022/01/22/js-qiang-yin-yong-he-ruo-yin-yong/">js强引用和弱引用</a></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> weakSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>weakSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">//TypeError: Invalid value used in weak set</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>WeakSet常见的方法：</p><ul><li>add(value)：添加某个元素，返回WeakSet对象本身；</li><li>delete(value)：从WeakSet中删除和这个值相等的元素，返回boolean类型;</li><li> has(value)：判断WeakSet中是否存在某个元素，返回boolean类型；</li></ul></li><li><p>注意：WeakSet不能遍历</p></li><li><p>因为WeakSet只是对对象的弱引用，如果我们遍历获取到其中的元素，那么有可能造成对象不能正常的销毁。</p></li><li><p>应用场景</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 3.WeakSet的应用场景</span><span class="token keyword">const</span> personSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    personSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>personSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"不能通过非构造方法创建出来的对象调用running方法"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"running~"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token keyword">null</span>p<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"why"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="1-Map的基本使用"><a href="#1-Map的基本使用" class="headerlink" title="1.Map的基本使用"></a>1.Map的基本使用</h3><ul><li><p>Map，用于存储映射关系。</p></li><li><p>与对象映射关系的区别</p><ul><li>对象存储映射关系只能用字符串（ES6新增了Symbol）作为属性名（key）；</li><li>某些情况下我们可能希望通过其他类型作为key，比如对象，这个时候会自动将对象转成字符串来作为key；</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token keyword">const</span> map2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>obj1<span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>obj2<span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Map的常用方法"><a href="#2-Map的常用方法" class="headerlink" title="2.Map的常用方法"></a>2.Map的常用方法</h3><ul><li><p>Map常见的属性：</p><ul><li>size：返回Map中元素的个数;</li></ul></li><li><p>Map常见的方法：</p><ul><li>set(key, value)：在Map中添加key、value，并且返回整个Map对象；</li><li>get(key)：根据key获取Map中的value；</li><li>has(key)：判断是否包括某一个key，返回Boolean类型；</li><li>delete(key)：根据key删除一个键值对，返回Boolean类型；</li><li>clear()：清空所有的元素；</li><li>forEach(callback, [, thisArg])：通过forEach遍历set；（也支持for of遍历）</li></ul></li></ul><h3 id="3-WeakMap的使用"><a href="#3-WeakMap的使用" class="headerlink" title="3.WeakMap的使用"></a>3.WeakMap的使用</h3><p>和Map类型相似的另外一个数据结构称之为WeakMap，也是以键值对的形式存在的。</p><ul><li>WeakMap的key只能使用对象，不接受其他的类型作为key；</li><li>WeakMap的key对对象想的引用是弱引用，如果没有其他引用引用这个对象，那么GC可以回收该对象；</li><li>关于强引用和弱引用请看：<a href="https://baozhacao.github.io/2022/01/22/js-qiang-yin-yong-he-ruo-yin-yong/">js强引用和弱引用</a></li><li>WeakMap常见的方法：<ul><li>set(key, value)：在Map中添加key、value，并且返回整个Map对象；</li><li>get(key)：根据key获取Map中的value；</li><li>has(key)：判断是否包括某一个key，返回Boolean类型；</li><li>delete(key)：根据key删除一个键值对，返回Boolean类型；</li></ul></li></ul><h3 id="4-WeakMap的应用"><a href="#4-WeakMap的应用" class="headerlink" title="4.WeakMap的应用"></a>4.WeakMap的应用</h3><ul><li>在vue3响应式原理中作用很大，什么是响应式原理呢？简单来说就是定义一个变量和一个函数，要求每当这个变量发生改变时，函数就随之执行一次。也就是说这个变量要被监听。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 应用场景(vue3响应式原理)</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"why"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">obj1NameFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"obj1NameFn1被执行"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">obj1NameFn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"obj1NameFn2被执行"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">obj1AgeFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"obj1AgeFn1"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">obj1AgeFn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"obj1AgeFn2"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 1.创建WeakMap</span><span class="token keyword">const</span> weakMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 2.收集依赖结构</span><span class="token comment">// 2.1.对obj1收集的数据结构，能遍历</span><span class="token keyword">const</span> obj1Map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>obj1Map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>obj1NameFn1<span class="token punctuation">,</span> obj1NameFn2<span class="token punctuation">]</span><span class="token punctuation">)</span>obj1Map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>obj1AgeFn1<span class="token punctuation">,</span> obj1AgeFn2<span class="token punctuation">]</span><span class="token punctuation">)</span>weakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj1Map<span class="token punctuation">)</span><span class="token comment">// Proxy/Object.defineProperty</span><span class="token comment">// 3.如果obj1.name发生了改变</span>obj1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"james"</span><span class="token comment">//找到obj1对应的obj1Map，targetMap就是obj1Map了</span><span class="token keyword">const</span> targetMap <span class="token operator">=</span> weakMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token comment">//找到obj1Map中的name，name对应的是两个函数</span><span class="token keyword">const</span> fns <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token comment">//遍历实现这两个函数完成响应</span>fns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token function">item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//map能遍历，weakMap不能，但他能垃圾回收，所以用它来实现</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> es6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
            <tag> Set </tag>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js实现call-apply-bind</title>
      <link href="/2022/01/23/js-shi-xian-call-apply-bind/"/>
      <url>/2022/01/23/js-shi-xian-call-apply-bind/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是call-apply-bind"><a href="#1-什么是call-apply-bind" class="headerlink" title="1.什么是call-apply-bind"></a>1.什么是call-apply-bind</h2><ul><li><p>call-apply-bind是JavaScript中三个函数，用来改变函数执行上下文，也就是改变函数运行时this的指向。</p><p>关于this指向问题具体请看<a href="https://baozhacao.github.io/2022/01/21/js-han-shu-zhong-this-zhi-xiang/">js函数中this指向问题</a></p></li></ul><h2 id="2-call-apply-bind区别与联系"><a href="#2-call-apply-bind区别与联系" class="headerlink" title="2.call-apply-bind区别与联系"></a>2.call-apply-bind区别与联系</h2><ul><li>apply和call基本类似，他们的区别只是传入的参数不同。前者传入的是一个数组，后者传入一个一个值。</li><li>bind方法会创建一个新的函数，并返回一个新的函数。当被调用的时候，将其this关键字设置为提供的值，我们必须手动去调用。与上面二者的区别是不能立即执行，要手动调用返回的函数之后才会执行。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//  call,apply,bind使用</span>  child<span class="token punctuation">.</span><span class="token function">showName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>  child<span class="token punctuation">.</span><span class="token function">showName</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> bind <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">showName</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回一个函数</span>  <span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// tony</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-一些开发中的应用"><a href="#3-一些开发中的应用" class="headerlink" title="3.一些开发中的应用"></a>3.一些开发中的应用</h2><ul><li>啥也不说了直接上代码</li><li>究其原理就是把当前this的指向给固有的方法，调用其函数。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//例子1：求数组中的最值</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 19</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  19 直接可以用arr1传递进去</span><span class="token comment">//例子2：将伪数组转化为数组（含有length属性的对象，dom节点, 函数的参数arguments）</span><span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//因为div是伪数组，所以不能直接调用slice（截取）方法，用call方法把this指向div，把参数全拿出来，间接转化成一个数组。</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//let args = [].slice.call(arguments, 0);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-js模拟实现call-apply-bind"><a href="#4-js模拟实现call-apply-bind" class="headerlink" title="4.js模拟实现call-apply-bind"></a>4.js模拟实现call-apply-bind</h2><ul><li>call</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 给所有的函数添加一个hycall的方法</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hycall</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 在这里可以去执行调用的那个函数(foo)</span>  <span class="token comment">// 问题: 得可以获取到是哪一个函数执行了hycall</span>  <span class="token comment">// 1.获取需要被执行的函数</span>  <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token comment">// 2.对thisArg转成对象类型(防止它传入的是非对象类型)</span>  thisArg <span class="token operator">=</span> <span class="token punctuation">(</span>thisArg <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> thisArg <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span><span class="token operator">:</span> window  <span class="token comment">// 3.调用需要被执行的函数</span>  thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn  <span class="token keyword">var</span> result <span class="token operator">=</span> thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>  <span class="token keyword">delete</span> thisArg<span class="token punctuation">.</span>fn  <span class="token comment">// 4.将最终的结果返回出去</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo函数被执行"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"sum函数被执行"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span>  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">&#125;</span><span class="token comment">// 系统的函数的call方法</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token comment">// console.log("系统调用的结果:", result)</span><span class="token comment">// 自己实现的函数的hycall方法</span><span class="token comment">// 默认进行隐式绑定</span><span class="token comment">// foo.hycall(&#123;name: "why"&#125;)</span>foo<span class="token punctuation">.</span><span class="token function">hycall</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token keyword">var</span> result <span class="token operator">=</span> sum<span class="token punctuation">.</span><span class="token function">hycall</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hycall的调用:"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>apply</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hyapply</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span> argArray</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 1.获取到要执行的函数</span>  <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token comment">// 2.处理绑定的thisArg</span>  thisArg <span class="token operator">=</span> <span class="token punctuation">(</span>thisArg <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> thisArg <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span><span class="token operator">:</span> window  <span class="token comment">// 3.执行函数</span>  thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn  <span class="token keyword">var</span> result  <span class="token comment">// if (!argArray) &#123; // argArray是没有值(没有传参数)</span>  <span class="token comment">//   result = thisArg.fn()</span>  <span class="token comment">// &#125; else &#123; // 有传参数</span>  <span class="token comment">//   result = thisArg.fn(...argArray)</span>  <span class="token comment">// &#125;</span>  <span class="token comment">// argArray = argArray ? argArray: []</span>  argArray <span class="token operator">=</span> argArray <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  result <span class="token operator">=</span> thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>argArray<span class="token punctuation">)</span>  <span class="token keyword">delete</span> thisArg<span class="token punctuation">.</span>fn  <span class="token comment">// 4.返回结果</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"sum被调用"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span>  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> num<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"bar函数被执行"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>bind</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hybind</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span> <span class="token operator">...</span>argArray</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 1.获取到真实需要调用的函数</span>  <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token comment">// 2.绑定this</span>  thisArg <span class="token operator">=</span> <span class="token punctuation">(</span>thisArg <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> thisArg <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span><span class="token operator">:</span> window  <span class="token keyword">function</span> <span class="token function">proxyFn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 3.将函数放到thisArg中进行调用</span>    thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn    <span class="token comment">// 特殊: 对两个传入的参数进行合并</span>    <span class="token keyword">var</span> finalArgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>argArray<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">]</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>finalArgs<span class="token punctuation">)</span>    <span class="token keyword">delete</span> thisArg<span class="token punctuation">.</span>fn    <span class="token comment">// 4.返回结果</span>    <span class="token keyword">return</span> result  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> proxyFn<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo被执行"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num4<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 系统的bind使用</span><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> newSum <span class="token operator">=</span> sum<span class="token punctuation">.</span><span class="token function">hybind</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">newSum</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> call </tag>
            
            <tag> apply </tag>
            
            <tag> bind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6语法</title>
      <link href="/2022/01/22/es6-ji-chu-yu-fa/"/>
      <url>/2022/01/22/es6-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="1-ES6怎么来的"><a href="#1-ES6怎么来的" class="headerlink" title="1.ES6怎么来的"></a>1.ES6怎么来的</h2><ul><li>ECMAScript和JavaScript<ul><li>ECMA是标准，JS是实现</li><li>ECMAScript简称ECMA或ES</li></ul></li><li>历史版本<ul><li>1996年，ES1.0 Netscape将JS提交给ECMA组织，ES正式出现</li><li>1999年，ES3.0被广泛支持</li><li>2011，ES5.1成为ISO国际标准</li><li>2015年，ES6.0正式发布</li></ul></li></ul><h2 id="2-ES6兼容性"><a href="#2-ES6兼容性" class="headerlink" title="2.ES6兼容性"></a>2.ES6兼容性</h2><ul><li>ES6（ES2015）支持的环境IE10 +，Chrome，FireFox，移动端，NodeJS</li><li>解决不兼容办法，编译，转换<ul><li>在线转换</li><li>或者提前编译</li></ul></li><li><a href="https://www.babeljs.cn/">Babel中文网</a><ul><li><a href="http://www.ruanyifeng.com/blog/2016/01/babel.html">Babel入门教程阮一峰</a></li><li>Babel是一个JavaScript编译器</li><li>一个广泛使用的转码器，可以将ES6代码转为ES5代码，从而在现有环境中执行</li><li>现在就用ES6编写程序，而不用担心现有环境是否支持</li></ul></li></ul><h2 id="3-let-const-var"><a href="#3-let-const-var" class="headerlink" title="3.let-const-var"></a>3.let-const-var</h2><ul><li><p>let关键字</p><ul><li>从直观的角度来说，let和var是没有太大的区别的，都是用于声明一个变量；</li></ul></li><li><p>const关键字</p><ul><li>const关键字是constant的单词的缩写，表示常量、衡量的意思；</li><li>它表示保存的数据一旦被赋值，就不能被修改；</li><li>但是如果赋值的是引用类型，那么可以通过引用找到对应的对象，修改对象的内容</li></ul></li></ul><p>注意：另外let、const不允许重复声明变量；</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>var所表现出来的特殊性：比如作用域提升、window全局对象、没有块级作用域等都是一些 历史遗留问题；其实是JavaScript在设计之初的一种语言缺陷；</p><p>对于let和const来说，是目前开发中推荐使用的；会优先推荐使用const，这样可以保证数据的安全性不会被随意的篡改； 只有当我们明确知道一个变量后续会需要被重新赋值时，这个时候再使用let；这种在很多其他语言里面也都是一种约定俗成的规范，尽量我们也遵守这种规范；</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>let关键字</p><ol><li>不允许重复声明； </li><li>块儿级作用域（局部变量）； </li><li>不存在变量提升；</li><li>不影响作用域链；</li></ol><p>const关键字</p><ol><li>声明必须赋初始值；</li><li>不允许重复声明；</li><li>值不允许修改；</li><li>块儿级作用域（局部变量）；</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1. 不允许重复声明；</span><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token string">"狗"</span><span class="token punctuation">;</span><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token string">"狗"</span><span class="token punctuation">;</span><span class="token comment">// 报错：Uncaught SyntaxError: Identifier 'dog' has already been declared</span><span class="token comment">// 2. 块儿级作用域（局部变量）；</span><span class="token punctuation">&#123;</span><span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token string">"猫"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 报错：Uncaught ReferenceError: cat is not defined</span><span class="token comment">// 3. 不存在变量提升；</span><span class="token comment">// 什么是变量提升：就是在变量创建之前使用（比如输出：输出的是默认值），let不存在，var存在；</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>people1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可输出默认值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>people2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错：Uncaught ReferenceError: people2 is not</span>defined<span class="token keyword">var</span> people1 <span class="token operator">=</span> <span class="token string">"大哥"</span><span class="token punctuation">;</span> <span class="token comment">// 存在变量提升</span><span class="token keyword">let</span> people2 <span class="token operator">=</span> <span class="token string">"二哥"</span><span class="token punctuation">;</span> <span class="token comment">// 不存在变量提升</span><span class="token comment">// 4. 不影响作用域链；</span><span class="token comment">// 什么是作用域链：很简单，就是代码块内有代码块，跟常规编程语言一样，上级代码块中</span>的局部变量下级可用<span class="token punctuation">&#123;</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token string">"大哥"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里是可以使用的</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-对象字面量增强的写法"><a href="#4-对象字面量增强的写法" class="headerlink" title="4.对象字面量增强的写法"></a>4.对象字面量增强的写法</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"why"</span><span class="token punctuation">;</span><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//对属性</span>  name<span class="token punctuation">,</span> age<span class="token punctuation">,</span><span class="token comment">// 对方法</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lll<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 计算属性名</span>  <span class="token punctuation">[</span>name<span class="token operator">+</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token string">'hahaha'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-解构赋值"><a href="#5-解构赋值" class="headerlink" title="5.解构赋值"></a>5.解构赋值</h2><p>使用场景：<br>1.在开发中拿到一个变量时，自动对其解构使用<br>2.在函数传参传入一个对象或数组时，可直接对其解构使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'aaa'</span><span class="token punctuation">,</span><span class="token string">'bbb'</span><span class="token punctuation">,</span><span class="token string">'ccc'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 对数组的解构</span><span class="token keyword">const</span> <span class="token punctuation">[</span>item1<span class="token punctuation">,</span>item2<span class="token punctuation">,</span>item3<span class="token punctuation">]</span> <span class="token operator">=</span> names<span class="token punctuation">;</span><span class="token comment">// 只结构后面的元素</span><span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">,</span>item1<span class="token punctuation">]</span> <span class="token operator">=</span> names<span class="token punctuation">;</span><span class="token comment">// 解构出一个元素后面的元素放到新的数组中</span><span class="token keyword">const</span> <span class="token punctuation">[</span>item1<span class="token punctuation">,</span><span class="token operator">...</span>newNames<span class="token punctuation">]</span> <span class="token operator">=</span> names<span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"why"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>  <span class="token literal-property property">height</span><span class="token operator">:</span><span class="token number">1.88</span><span class="token punctuation">&#125;</span><span class="token comment">// 对对象的解构 &#123;&#125;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>height<span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token comment">// 对结构的名字重命名</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span>newName<span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj <span class="token comment">//newName:"why"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-模板字符串"><a href="#6-模板字符串" class="headerlink" title="6.模板字符串"></a>6.模板字符串</h2><p>使用场景：<br>当遇到字符串与变量拼接的情况使用模板字符串；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 特性</span><span class="token comment">// 1、字符串中可以出现换行符</span><span class="token keyword">let</span> str <span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;ul>&lt;li>大哥&lt;/li>&lt;/ul></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token comment">// 2、可以使用 $&#123;xxx&#125; 形式引用变量</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">"大哥"</span><span class="token punctuation">;</span><span class="token keyword">let</span> out <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>s<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">是我最大的榜样！</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-扩展运算符"><a href="#7-扩展运算符" class="headerlink" title="7.扩展运算符"></a>7.扩展运算符</h2><p>… 扩展运算符能将数组转换为逗号分隔的参数序列；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1. 数组的合并 情圣 误杀 唐探</span><span class="token keyword">const</span> kuaizi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'王太利'</span><span class="token punctuation">,</span><span class="token string">'肖央'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> fenghuang <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'曾毅'</span><span class="token punctuation">,</span><span class="token string">'玲花'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> zuixuanxiaopingguo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>kuaizi<span class="token punctuation">,</span> <span class="token operator">...</span>fenghuang<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//2. 数组的克隆</span><span class="token keyword">const</span> sanzhihua <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'E'</span><span class="token punctuation">,</span><span class="token string">'G'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> sanyecao <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>sanzhihua<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// ['E','G','M']</span><span class="token comment">//3. 将伪数组转为真正的数组</span><span class="token keyword">const</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> divArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>divs<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-箭头函数"><a href="#8-箭头函数" class="headerlink" title="8.箭头函数"></a>8.箭头函数</h2><ul><li>箭头函数，就是函数的简写<ul><li>如果只有一个参数，<code>()</code>可以省</li><li>如果只有一个<code>return</code>，<code>&#123;&#125;</code>可以省</li></ul></li></ul><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li> 箭头函数的this是静态的，始终指向函数声明时所在作用域下的this的值；(就是上层作用域的值)</li><li>不能作为构造实例化对象；</li><li>不能使用 arguments 变量；</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//无参数</span><span class="token keyword">let</span> <span class="token function-variable function">speak</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello 哈哈！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一个参数</span><span class="token keyword">let</span> <span class="token function-variable function">hi</span> <span class="token operator">=</span> <span class="token parameter">name</span> <span class="token operator">=></span> <span class="token string">"hi "</span> <span class="token operator">+</span> name<span class="token comment">//多个参数</span><span class="token keyword">let</span> <span class="token function-variable function">he</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span><span class="token comment">//this的指向</span><span class="token function-variable function">getName1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"getName1："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//this指向window</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-数组"><a href="#9-数组" class="headerlink" title="9.数组"></a>9.数组</h2><ul><li>新增4个方法</li><li>map 映射 一个对一个</li></ul><pre class="line-numbers language-none"><code class="language-none">let arr &#x3D; [12, 5, 8]let result &#x3D; arr.map(function (item) &#123;    return item*2&#125;)let result2 &#x3D; arr.map(item&#x3D;&gt;item*2) &#x2F;&#x2F; 简写console.log(result)console.log(result2)let score &#x3D; [18, 86, 88, 24]let result3 &#x3D; score.map(item &#x3D;&gt; item &gt;&#x3D; 60 ? &#39;及格&#39; : &#39;不及格&#39;)console.log(result3)&#x2F;&#x2F; 结果[ 24, 10, 16 ][ 24, 10, 16 ][ &#39;不及格&#39;, &#39;及格&#39;, &#39;及格&#39;, &#39;不及格&#39; ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>reduce 汇总 一堆出来一个<ul><li>用于比如，算个总数，算个平均</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">var arr &#x3D; [1, 3, 5, 7]var result &#x3D; arr.reduce(function (tmp, item, index) &#123;    &#x2F;&#x2F;tmp 上次结果，item当前数，index次数1开始    console.log(tmp, item, index)    return tmp + item&#125;)console.log(result)var arr &#x3D; [1, 3, 5, 7]var result &#x3D; arr.reduce(function (tmp, item, index) &#123;    if (index !&#x3D; arr.length - 1) &#123; &#x2F;&#x2F; 不是最后一次        return tmp + item    &#125; else &#123;        return (tmp + item)&#x2F;arr.length    &#125;&#125;)console.log(result)  &#x2F;&#x2F; 平均值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>filter 过滤器 保留为true的</li></ul><pre class="line-numbers language-none"><code class="language-none">var arr &#x3D; [12, 4, 8, 9]var result &#x3D; arr.filter(item &#x3D;&gt; (item % 3 &#x3D;&#x3D;&#x3D; 0) ? true : false)console.log(result)var result &#x3D; arr.filter(item &#x3D;&gt; item % 3 &#x3D;&#x3D;&#x3D; 0)console.log(result)var arr &#x3D; [    &#123; title: &#39;苹果&#39;, price: 10 &#125;,    &#123; title: &#39;西瓜&#39;, price: 20 &#125;,]var result &#x3D; arr.filter(json &#x3D;&gt; json.price &gt;&#x3D; 20)console.log(result)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>forEach 循环迭代</li></ul><pre class="line-numbers language-none"><code class="language-none">var arr &#x3D; [12, 4, 8, 9]var result &#x3D; arr.forEach(item &#x3D;&gt; console.log(item))var result &#x3D; arr.forEach((item, index)&#x3D;&gt;console.log(item, index))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="10-Symbol"><a href="#10-Symbol" class="headerlink" title="10.Symbol"></a>10.Symbol</h2><ol><li>Symbol 的值是唯一的，用来解决命名冲突的问题；</li><li>Symbol 值不能与其他数据进行运算；</li><li>Symbol 定义的对象属性不能使用for…in循环遍历 ，但是可以使用Reflect.ownKeys 来获取对象的 所有键名；</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建Symbol</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 向对象中添加方法</span><span class="token comment">// 方式一</span><span class="token keyword">let</span> methods <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">up</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token literal-property property">down</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>game<span class="token punctuation">[</span>methods<span class="token punctuation">.</span>up<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我可以改变形状"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>game<span class="token punctuation">[</span>methods<span class="token punctuation">.</span>down<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Symbol内置值：概述：除了定义自己使用的 Symbol 值以外，<span class="token constant">ES6</span> 还提供了 <span class="token number">11</span> 个内置的 Symbol 值，指向语言内部使用的方法。可以称这些方法为魔术方法，因为它们会在特定的场景下自动执行；方法：console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我可以快速下降!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方式二</span><span class="token keyword">let</span> youxi <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"狼人杀"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'say'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我可以发言"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'zibao'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以自爆'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>youxi<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> es6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js强引用和弱引用</title>
      <link href="/2022/01/22/js-qiang-yin-yong-he-ruo-yin-yong/"/>
      <url>/2022/01/22/js-qiang-yin-yong-he-ruo-yin-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><ul><li>在JavaScript 中，开发者不需要手动进行内存管理，JS 引擎会“自动”做这些事情。JavaScript在创建变量时自动进行了分配内存，并且在不使用它们时“自动”释放。这个释放的过程叫做垃圾回收。但是虽然说是“自动”释放，但这并不意味着我们开发者就不用关心内存管理问题。</li></ul><h2 id="2-强引用"><a href="#2-强引用" class="headerlink" title="2.强引用"></a>2.强引用</h2><ul><li><p>强引用是使用最普遍的引用。它是指向内存申请一段存储空间，进行存储的引用类型的<strong>对象的引用</strong>。在对象获得的分配内存空间中不仅仅存放了对象的信息，还存放着该对象被引用的次数。</p></li><li><p>如果一个对象具有强引用，那么垃圾回收器就不会回收它。</p></li></ul><h2 id="3-弱引用"><a href="#3-弱引用" class="headerlink" title="3.弱引用"></a>3.弱引用</h2><ul><li><p><strong>一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。</strong>但是，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快地发现那些只具有弱引用的对象。</p></li><li><p>也就是说，一个对象若只被弱引用所引用，则被认为是不可访问（或弱可访问）的，并因此可能在任何时刻被回收。</p></li></ul><h2 id="4-例子"><a href="#4-例子" class="headerlink" title="4.例子"></a>4.例子</h2><ul><li>weakSet和weakMap</li></ul>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 强引 </tag>
            
            <tag> 弱引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js函数中this指向问题</title>
      <link href="/2022/01/21/js-han-shu-zhong-this-zhi-xiang/"/>
      <url>/2022/01/21/js-han-shu-zhong-this-zhi-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="1-为什么要有this"><a href="#1-为什么要有this" class="headerlink" title="1.为什么要有this"></a>1.为什么要有this</h2><ul><li>在常见的编程语言中，几乎都有this这个关键字（Objective-C中使用的是self），但是JavaScript中的this和常见的面向对象语言中的this不太一样：<ul><li>常见面向对象的编程语言中，比如Java、C++、Swift、Dart等等一系列语言中，this通常只会出现在类的方法中。</li><li>也就是你需要有一个类，类中的方法（特别是实例方法）中，this代表的是当前调用对象。</li><li>但是JavaScript中的this更加灵活，无论是它出现的位置还是它代表的含义。</li></ul></li></ul><h2 id="2-this的绑定规则"><a href="#2-this的绑定规则" class="headerlink" title="2.this的绑定规则"></a>2.this的绑定规则</h2><pre><code>this的绑定和定义的位置（编写的位置）没有关系；this的绑定和调用方式以及调用的位置有关系；</code></pre><ul><li><p>绑定一：默认绑定；</p><ul><li><p>独立的函数调用，我们可以理解成函数没有被绑定到某个对象上进行调用；（this指向window）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token comment">// 1.案例一:</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//window</span><span class="token comment">// 2.案例二:</span> <span class="token keyword">function</span> <span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>   <span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>   <span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//window  window window</span><span class="token comment">// 3.案例三:</span> <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"why"</span><span class="token punctuation">,</span>   <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">var</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// window</span><span class="token comment">// 4.案例四:</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"why"</span><span class="token punctuation">,</span>   <span class="token literal-property property">foo</span><span class="token operator">:</span> foo <span class="token punctuation">&#125;</span> <span class="token keyword">var</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// window</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>绑定二：隐式绑定；</p><ul><li><p>也就是它的调用位置中，是通过某个对象发起的函数调用(谁调用this指向谁)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.案例一:</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"why"</span><span class="token punctuation">,</span>  <span class="token literal-property property">foo</span><span class="token operator">:</span> foo<span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// obj对象</span><span class="token comment">//2.案例二:</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"why"</span><span class="token punctuation">,</span>  <span class="token function-variable function">eating</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"在吃东西"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">running</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"在跑步"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// obj.eating()</span><span class="token comment">// obj.running()</span><span class="token keyword">var</span> fn <span class="token operator">=</span> obj<span class="token punctuation">.</span>eating<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 3.案例三:</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"obj1"</span><span class="token punctuation">,</span>  <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"obj2"</span><span class="token punctuation">,</span>  <span class="token literal-property property">bar</span><span class="token operator">:</span> obj1<span class="token punctuation">.</span>foo<span class="token punctuation">&#125;</span>obj2<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>绑定三：显示绑定；</p><ul><li><p>必须在调用的对象内部有一个对函数的引用（比如一个属性）；</p></li><li><p>如果没有这样的引用，在进行调用时，会报找不到该函数的错误；</p></li><li><p> 正是通过这个引用，间接的将this绑定到了这个对象上</p></li></ul>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1.foo直接调用和call/apply调用的不同在于this绑定的不同</span><span class="token comment">// foo直接调用指向的是全局对象(window)</span><span class="token comment">// foo()</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"obj"</span><span class="token punctuation">&#125;</span><span class="token comment">// call/apply是可以指定this的绑定对象</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span><span class="token comment">// 2.call和apply有什么区别?</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2 <span class="token operator">+</span> num3<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"call"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"apply"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 3.call和apply在执行函数时,是可以明确的绑定this, 这个绑定规则称之为显示绑定</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>优先级：显示 &gt; 隐式 &gt; 默认</p></li></ul><h2 id="3-this绑定规则之外"><a href="#3-this绑定规则之外" class="headerlink" title="3.this绑定规则之外"></a>3.this绑定规则之外</h2><ol><li><p>忽略显示绑定</p><ul><li><p>如果在显示绑定中，我们传入一个null或者undefined，那么这个显示绑定会被忽略，使用默认规则</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token comment">//obj对象</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//window</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//window</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>间接函数引用</p><ul><li><p>创建一个函数的 间接引用，这种情况使用默认绑定规则。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">obj2<span class="token punctuation">.</span>foo <span class="token operator">=</span> obj1<span class="token punctuation">.</span>foo <span class="token comment">//window</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>ES6箭头函数</p><ul><li>因为箭头函数并不绑定this对象，那么this引用就会从上层作用于中找到对应的this</li></ul></li></ol><h2 id="4-经典面试题"><a href="#4-经典面试题" class="headerlink" title="4.经典面试题"></a>4.经典面试题</h2><ol><li><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"window"</span><span class="token punctuation">;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"person"</span><span class="token punctuation">,</span>  <span class="token function-variable function">sayName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> sss <span class="token operator">=</span> person<span class="token punctuation">.</span>sayName<span class="token punctuation">;</span>  <span class="token function">sss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// window: 独立函数调用</span>  person<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// person: 隐式调用</span>  <span class="token punctuation">(</span>person<span class="token punctuation">.</span>sayName<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// person: 隐式调用</span>  <span class="token punctuation">(</span>b <span class="token operator">=</span> person<span class="token punctuation">.</span>sayName<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// window: 赋值表达式(独立函数调用)</span><span class="token punctuation">&#125;</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'window'</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'person1'</span><span class="token punctuation">,</span>  <span class="token function-variable function">foo1</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">foo2</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function-variable function">foo3</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">foo4</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'person2'</span> <span class="token punctuation">&#125;</span><span class="token comment">// person1.foo1(); // person1(隐式绑定)</span><span class="token comment">// person1.foo1.call(person2); // person2(显示绑定优先级大于隐式绑定)</span><span class="token comment">// person1.foo2(); // window(不绑定作用域,上层作用域是全局)</span><span class="token comment">// person1.foo2.call(person2); // window</span><span class="token comment">// person1.foo3()(); // window(独立函数调用)</span><span class="token comment">// person1.foo3.call(person2)(); // window(独立函数调用)</span><span class="token comment">// person1.foo3().call(person2); // person2(最终调用返回函数式, 使用的是显示绑定)</span><span class="token comment">// person1.foo4()(); // person1(箭头函数不绑定this, 上层作用域this是person1)</span><span class="token comment">// person1.foo4.call(person2)(); // person2(上层作用域被显示的绑定了一个person2)</span><span class="token comment">// person1.foo4().call(person2); // person1(上层找到person1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'window'</span><span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">foo1</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">foo2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">foo3</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">foo4</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'person1'</span><span class="token punctuation">)</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'person2'</span><span class="token punctuation">)</span>person1<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// person1</span>person1<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment">// person2(显示高于隐式绑定)</span>person1<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// person1 (上层作用域中的this是person1)</span>person1<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment">// person1 (上层作用域中的this是person1)</span>person1<span class="token punctuation">.</span><span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// window(独立函数调用)</span>person1<span class="token punctuation">.</span><span class="token function">foo3</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// window</span>person1<span class="token punctuation">.</span><span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment">// person2</span>person1<span class="token punctuation">.</span><span class="token function">foo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// person1</span>person1<span class="token punctuation">.</span><span class="token function">foo4</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// person2</span>person1<span class="token punctuation">.</span><span class="token function">foo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment">// person1</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"obj"</span><span class="token punctuation">,</span>  <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'window'</span><span class="token keyword">function</span> Person <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token string">'obj'</span><span class="token punctuation">,</span>    foo1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    foo2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'person1'</span><span class="token punctuation">)</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'person2'</span><span class="token punctuation">)</span>person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// window</span>person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>foo1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// window</span>person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// person2</span>person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// obj</span>person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>foo2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// person2</span>person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// obj</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
